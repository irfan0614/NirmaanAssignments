JavaScript Type Conversion

JavaScript variables can be converted to a new variable and another data type:

    By the use of a JavaScript function
    Automatically by JavaScript itself


Converting Numbers to Strings

var x = 123;
String(x)         // returns a string from a number variable x
String(123)       // returns a string from a number literal 123
String(100 + 23)  // returns a string from a number from an expression
or  
x.toString()
(123).toString()
(100 + 23).toString() 

more methods that can be used to convert numbers to strings:
toExponential() Returns a string, with a number rounded and written using exponential notation.
toFixed() 	Returns a string, with a number rounded and written with a specified number of decimals.
toPrecision() 	Returns a string, with a number written with a specified length

Converting Booleans to Strings

String(false)      // returns "false"
String(true)       // returns "true" 
or
false.toString()   // returns "false"
true.toString()    // returns "true"


Converting Dates to Strings

String(Date())  // returns "Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)"
or
Date().toString()  // returns "Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)" 


more methods that can be used to convert dates to strings:

getDate() 	Get the day as a number (1-31)
getDay() 	Get the weekday a number (0-6)
getFullYear() 	Get the four digit year (yyyy)
getHours() 	Get the hour (0-23)
getMilliseconds() 	Get the milliseconds (0-999)
getMinutes() 	Get the minutes (0-59)
getMonth() 	Get the month (0-11)
getSeconds() 	Get the seconds (0-59)


Converting Strings to Numbers

Number("3.14")    // returns 3.14
Number(" ")       // returns 0
Number("")        // returns 0
Number("99 88")   // returns NaN 

more methods that can be used to convert strings to numbers:

parseFloat() 	Parses a string and returns a floating point number
parseInt() 	Parses a string and returns an integer
getTime() 	Get the time (milliseconds since January 1, 1970)


The Unary + Operator
The unary + operator can be used to convert a variable to a number:
var y = "5";      // y is a string
var x = + y;      // x is a number 


Converting Booleans to Numbers
Number(false)     // returns 0
Number(true)      // returns 1 


Converting Dates to Numbers

d = new Date();
Number(d)          // returns 1404568027739 
or
d = new Date();
d.getTime()        // returns 1404568027739 


Automatic Type Conversion
When JavaScript tries to operate on a "wrong" data type, it will try to convert the value to a "right" type.

5 + null    // returns 5         because null is converted to 0
"5" + null  // returns "5null"   because null is converted to "null"
"5" + 2     // returns "52"      because 2 is converted to "2"
"5" - 2     // returns 3         because "5" is converted to 5
"5" * "2"   // returns 10        because "5" and "2" are converted to 5 and 2 


Automatic String Conversion
JavaScript automatically calls the variable's toString() function when you try to "output" an object or a variable:
